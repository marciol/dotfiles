# Locale
export LC_ALL=en_US.UTF-8

# Local bin
export PATH=$PATH:$HOME/bin
export PATH=$PATH:$HOME/.local/bin

# brew
arch_name = "$(uname -m)"
if [ "$arch_name" = "arm64" ]; then
  eval "$(/opt/homebrew/bin/brew shellenv)"
else
  eval "$(/usr/local/bin/brew shellenv)"
fi

# direnv
eval "$(direnv hook bash)"

# Rust Cargo
export PATH="$HOME/.cargo/bin:$PATH"
source $HOME/.cargo/env

# Postgresql
export PATH="/usr/local/opt/libpq/bin:$PATH"

# PHP
export PATH=$PATH:$HOME/.composer/vendor/bin

# Dart
export PATH="/usr/local/opt/dart/libexec:$PATH"
export PATH="$PATH":"$HOME/.pub-cache/bin"

# Elixir
export PATH="$PATH":"$HOME/bin/elixir-ls"
export CORTEX_ENABLED=true
export ERL_AFLAGS="-kernel shell_history enabled"
export KERL_BUILD_DOCS="yes"
export ELIXIR_EDITOR="kittyvim +__LINE__ __FILE__"

# Autoconf
# export PATH="/usr/local/opt/autoconf@2.69/bin:$PATH"

# Go
GOPATH=$HOME/go
export GOPATH
PATH=$GOPATH/bin:$PATH

# Ruby
# eval "$(rbenv init -)"
alias be="bundle exec"

# VSCode (code)
export PATH="$PATH:/Applications/Visual Studio Code.app/Contents/Resources/app/bin"

# Emacs
export GTAGSLABEL=pygments
alias ec="emacsclient -c"

# Neovim default editor
export EDITOR=nvim

# VIS
export VIS_PATH=$HOME/vis

# ASDF
source $HOME/.asdf/asdf.sh
source $HOME/.asdf/completions/asdf.bash

# FZF
export FZF_DEFAULT_COMMAND='rg --files'
export FZF_DEFAULT_COMMAND='fd --type f'
[ -f ~/.fzf.bash ] && source ~/.fzf.bash

fzf_then_open_in_editor() {
  local file=$(fzf-tmux)
  # Open the file if it exists
  if [ -n "$file" ]; then
    # Use the default editor if it's defined, otherwise Vim
    ${EDITOR:-nvim} "$file"
  fi
}
bind -x '"\C-t": fzf_then_open_in_editor'

PATH=$HOME/bin:$PATH
PATH=$HOME/.local/bin:$PATH
PATH=$PATH:/usr/local/sbin
export PATH

# Bash
BASE16_SHELL=$HOME/.config/base16-shell/
# [ -n "$PS1" ] && [ -s $BASE16_SHELL/profile_helper.sh ] && eval "$($BASE16_SHELL/profile_helper.sh)"
alias gr='[ ! -z `git rev-parse --show-cdup` ] && cd `git rev-parse --show-cdup || pwd`'

# Clojerl
alias rebar3-clojerl="rlwrap -r -q '\"' -b '(){}[],^%#@\";:''' rebar3 clojerl"

# Autocompletion
[[ -r "$(brew --prefix)/etc/profile.d/bash_completion.sh" ]] && . "$(brew --prefix)/etc/profile.d/bash_completion.sh"

[[ -r "$(brew --prefix)/etc/bash_completion.d/git-prompt.sh" ]] && . "$(brew --prefix)/etc/bash_completion.d/git-prompt.sh"

GIT_PS1_SHOWDIRTYSTATE=true

set -o vi
bind '"jj":vi-movement-mode'

if [[ -n $AWS_VAULT ]]; then
    export PS1="\w\$(__git_ps1) AWS[$AWS_VAULT] \\$ "
elif [[ -z "$SSH_CLIENT" ]]; then
    # local connection, change prompt
    export PS1="\w\$(__git_ps1) \\$ "
else
    # ssh connection, print hostname and os version
    echo "Welcome to $(scutil --get ComputerName) ($(sw_vers -productVersion))"
fi

# GITHUB
# export GITHUB_TOKEN=35662a410ae5b7804b295e12c2b169c00ac9bfe8
alias chrome=/Applications/Google\ Chrome.app/Contents/MacOS/Google\ Chrome

# kitty ssh
alias ssh="kitty +kitten ssh"

# AWS Helpers

# Set a particular AWS rule with AWS SSO.
# Arguments:
#   The AWS alias for the role you want to assume.
function aws-role-sh() {
	aws-vault exec $1 -- bash
}

# Ensure that the right permissions for various AWS roles are present.
alias terraform-sh="aws-role-sh terraform-testing"
alias sandbox-sh="aws-role-sh sandbox"
alias staging-sh="aws-role-sh staging"
alias testing-sh="aws-role-sh testing"
